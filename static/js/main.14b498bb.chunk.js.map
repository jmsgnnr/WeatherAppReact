{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","photo","setPhoto","query","setQuery","weather","setWeather","search","evt","preventDefault","fetch","then","res","json","result","console","log","method","headers","Authorization","results","urls","regular","className","style","backgroundImage","onSubmit","e","type","placeholder","onChange","target","value","onClick","main","name","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuild","Date","Math","round","temp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMAMMA,EACC,mCADDA,EAEE,2CAFFA,EAKS,uDA+GAC,MA5Gf,WAAe,MAEaC,mBACxB,oKAHW,mBAENC,EAFM,KAECC,EAFD,OAKaF,mBAAS,IALtB,mBAKNG,EALM,KAKCC,EALD,OAMiBJ,mBAAS,IAN1B,mBAMNK,EANM,KAMGC,EANH,KAOPC,EAAS,SAACC,GACdA,EAAIC,iBAEJC,MAAM,GAAD,OAAIZ,EAAJ,qBAAyBK,EAAzB,+BAAqDL,IACvDa,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLC,QAAQC,IAAIF,GACZR,EAAWQ,GACG,KAAVX,GACFO,MAAM,GAAD,OAAIZ,GAAJ,OAAsBK,GAAS,CAClCc,OAAQ,MACRC,QAAS,CACPC,cACE,wDACF,eAAgB,sBAGjBR,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLZ,EAASY,EAAOM,QAAQ,GAAGC,KAAKC,SAChCP,QAAQC,IAAIF,GACZV,EAAS,WAwCrB,OACE,mCACE,+BACE,sBAAKmB,UAAU,MAAf,UACE,qBAAKA,UAAU,SAASC,MAAO,CAAEC,gBAAgB,OAAD,OAASxB,EAAT,MAAhD,SACE,wCAEF,uBAAMyB,SAAU,SAACC,GAAD,OAAOpB,EAAOoB,IAA9B,UACE,oBAAIJ,UAAU,YAAd,SACE,uBACEK,KAAK,OACLC,YAAY,kBAEZC,SAAU,SAACH,GAAD,OAAOvB,EAASuB,EAAEI,OAAOC,QACnCA,MAAO7B,EACP8B,QAAS1B,MAIW,oBAAhBF,EAAQ6B,KACd,qBAAIX,UAAU,cAAd,UACE,2CAAclB,EAAQ8B,QACtB,uCAxDI,SAACC,GACjB,IAyBIC,EAXO,CACT,SACA,SACA,UACA,YACA,WACA,SACA,WACA,UAGaD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EA3BS,CACX,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAeiBL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAyBZE,CAAU,IAAIC,SACxB,uCAAUC,KAAKC,MAAM3C,EAAQ6B,KAAKe,KAAO,IAAzC,QAEA,sCAAS5C,EAAQA,QAAQ,GAAG6B,WAG9B,qBAAIX,UAAU,WAAd,UACE,+EACA,uFCpGD2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzC,MAAK,YAAkD,IAA/C0C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.14b498bb.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\n// api.openweathermap.org/data/2.5/weather?q={city name}&appid={e2bf4439877de3bd651b96bb5ea545e}\n// uRJ60j0mPdYWVHTlh8i5Q9sTUMzRKaU5FAz1b-7rDlY\n//  https://api.unsplash.com/photos/?client_id=uRJ60j0mPdYWVHTlh8i5Q9sTUMzRKaU5FAz1b-7rDlY\n\nconst api = {\n  key: \"e2bf4439877de3bd651b96bb5ea545ee\",\n  base: \"HTTPS://api.openweathermap.org/data/2.5/\",\n  photo:\n    \"https://api.unsplash.com/photos/random/?client_id=uRJ60j0mPdYWVHTlh8i5Q9sTUMzRKaU5FAz1b-7rDlY\",\n  photoSearch: \"https://api.unsplash.com/search/photos?page=1&query=\",\n};\n\nfunction App() {\n  // when you run these functions , add a blank string\n  const [photo, setPhoto] = useState(\n    \"https://images.unsplash.com/photo-1488415032361-b7e238421f1b?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=1949&q=80\"\n  );\n  const [query, setQuery] = useState(\"\");\n  const [weather, setWeather] = useState({});\n  const search = (evt) => {\n    evt.preventDefault();\n\n    fetch(`${api.base}weather?q=${query}$units=metric&APPID=${api.key}`)\n      .then((res) => res.json())\n      .then((result) => {\n        console.log(result);\n        setWeather(result);\n        if (query !== \"\") {\n          fetch(`${api.photoSearch}${query}`, {\n            method: \"GET\",\n            headers: {\n              Authorization:\n                \"Client-ID uRJ60j0mPdYWVHTlh8i5Q9sTUMzRKaU5FAz1b-7rDlY\",\n              \"Content-Type\": \"application/json\",\n            },\n          })\n            .then((res) => res.json())\n            .then((result) => {\n              setPhoto(result.results[3].urls.regular);\n              console.log(result);\n              setQuery(\"\");\n            });\n        }\n      });\n  };\n\n  const dateBuild = (d) => {\n    let months = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ];\n    let days = [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\",\n      \"Sunday\",\n    ];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`;\n  };\n\n  return (\n    <>\n      <main>\n        <div className=\"App\">\n          <div className=\"divSep\" style={{ backgroundImage: `url(${photo})` }}>\n            <p>W3THR</p>\n          </div>\n          <form onSubmit={(e) => search(e)}>\n            <h1 className=\"searchbox\">\n              <input\n                type=\"text\"\n                placeholder=\"...CITY, STATE?\"\n                // the event 'e'\n                onChange={(e) => setQuery(e.target.value)}\n                value={query}\n                onClick={search}\n              />\n            </h1>\n            {/* when we only have one condition && to show just one thing  */}\n            {typeof weather.main != \"undefined\" ? (\n              <ul className=\"locationbox\">\n                <li>LOCATION:{weather.name}</li>\n                <li>DATE:{dateBuild(new Date())}</li>\n                <li>TEMP:{Math.round(weather.main.temp / 10)}*c</li>\n                {/* <li>Humidity:</li> */}\n                <li>SKY:{weather.weather[0].main}</li>\n              </ul>\n            ) : (\n              <ul className=\"initPage\">\n                <li>Enter City and State to view current weather!</li>\n                <li>Try searching a city in another country</li>\n                </ul>\n            )}\n          </form>\n        </div>\n      </main>\n    </>\n  );\n}\n\nexport default App;\n\n// const response = await fetch(url, {\n//   method: 'GET', // *GET, POST, PUT, DELETE, etc.\n//   // mode: 'cors', // no-cors, *cors, same-origin\n//   // cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n//   // credentials: 'same-origin', // include, *same-origin, omit\n//   headers: {\n//     'Authorization': 'Client-ID uRJ60j0mPdYWVHTlh8i5Q9sTUMzRKaU5FAz1b-7rDlY',\n//     'Content-Type': 'application/json'\n//   },\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}