{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","photo","setPhoto","query","setQuery","weather","setWeather","search","evt","preventDefault","fetch","then","res","json","result","console","log","method","headers","Authorization","results","urls","regular","className","style","backgroundImage","onSubmit","e","type","placeholder","onChange","target","value","onClick","main","name","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuild","Date","Math","round","temp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMAMMA,EACC,mCADDA,EAEE,2CAFFA,EAKS,uDAgHAC,MA7Gf,WAAe,MAEaC,mBACxB,oKAHW,mBAENC,EAFM,KAECC,EAFD,OAKaF,mBAAS,IALtB,mBAKNG,EALM,KAKCC,EALD,OAMiBJ,mBAAS,IAN1B,mBAMNK,EANM,KAMGC,EANH,KAOPC,EAAS,SAACC,GACdA,EAAIC,iBAEJC,MAAM,GAAD,OAAIZ,EAAJ,qBAAyBK,EAAzB,+BAAqDL,IACvDa,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLC,QAAQC,IAAIF,GACZR,EAAWQ,GACG,KAAVX,GACFO,MAAM,GAAD,OAAIZ,GAAJ,OAAsBK,GAAS,CAClCc,OAAQ,MACRC,QAAS,CACPC,cACE,wDACF,eAAgB,sBAGjBR,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLZ,EAASY,EAAOM,QAAQ,GAAGC,KAAKC,SAChCP,QAAQC,IAAIF,GACZV,EAAS,WAwCrB,OACE,mCACE,+BACE,sBAAKmB,UAAU,MAAf,UACE,qBAAKA,UAAU,SAASC,MAAO,CAAEC,gBAAgB,OAAD,OAASxB,EAAT,MAAhD,SACE,wCAEF,uBAAMyB,SAAU,SAACC,GAAD,OAAOpB,EAAOoB,IAA9B,UACE,oBAAIJ,UAAU,YAAd,SACE,uBACEK,KAAK,OACLC,YAAY,kBAEZC,SAAU,SAACH,GAAD,OAAOvB,EAASuB,EAAEI,OAAOC,QACnCA,MAAO7B,EACP8B,QAAS1B,MAIW,oBAAhBF,EAAQ6B,KACd,qBAAIX,UAAU,cAAd,UACE,2CAAclB,EAAQ8B,QACtB,uCAxDI,SAACC,GACjB,IAyBIC,EAXO,CACT,SACA,SACA,UACA,YACA,WACA,SACA,WACA,UAGaD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EA3BS,CACX,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAeiBL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAyBZE,CAAU,IAAIC,SACxB,uCAAUC,KAAKC,MAAM3C,EAAQ6B,KAAKe,KAAO,IAAzC,QAEA,sCAAS5C,EAAQA,QAAQ,GAAG6B,WAG9B,qBAAIX,UAAU,WAAd,UACE,8EACA,mEACA,0FCrGD2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzC,MAAK,YAAkD,IAA/C0C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.b4acfa0f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\n// api.openweathermap.org/data/2.5/weather?q={city name}&appid={e2bf4439877de3bd651b96bb5ea545e}\r\n// uRJ60j0mPdYWVHTlh8i5Q9sTUMzRKaU5FAz1b-7rDlY\r\n//  https://api.unsplash.com/photos/?client_id=uRJ60j0mPdYWVHTlh8i5Q9sTUMzRKaU5FAz1b-7rDlY\r\n\r\nconst api = {\r\n  key: \"e2bf4439877de3bd651b96bb5ea545ee\",\r\n  base: \"HTTPS://api.openweathermap.org/data/2.5/\",\r\n  photo:\r\n    \"https://api.unsplash.com/photos/random/?client_id=uRJ60j0mPdYWVHTlh8i5Q9sTUMzRKaU5FAz1b-7rDlY\",\r\n  photoSearch: \"https://api.unsplash.com/search/photos?page=1&query=\",\r\n};\r\n\r\nfunction App() {\r\n  // when you run these functions , add a blank string\r\n  const [photo, setPhoto] = useState(\r\n    \"https://images.unsplash.com/photo-1488415032361-b7e238421f1b?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=1949&q=80\"\r\n  );\r\n  const [query, setQuery] = useState(\"\");\r\n  const [weather, setWeather] = useState({});\r\n  const search = (evt) => {\r\n    evt.preventDefault();\r\n\r\n    fetch(`${api.base}weather?q=${query}$units=metric&APPID=${api.key}`)\r\n      .then((res) => res.json())\r\n      .then((result) => {\r\n        console.log(result);\r\n        setWeather(result);\r\n        if (query !== \"\") {\r\n          fetch(`${api.photoSearch}${query}`, {\r\n            method: \"GET\",\r\n            headers: {\r\n              Authorization:\r\n                \"Client-ID uRJ60j0mPdYWVHTlh8i5Q9sTUMzRKaU5FAz1b-7rDlY\",\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n          })\r\n            .then((res) => res.json())\r\n            .then((result) => {\r\n              setPhoto(result.results[2].urls.regular);\r\n              console.log(result);\r\n              setQuery(\"\");\r\n            });\r\n        }\r\n      });\r\n  };\r\n\r\n  const dateBuild = (d) => {\r\n    let months = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\",\r\n    ];\r\n    let days = [\r\n      \"Sunday\",\r\n      \"Monday\",\r\n      \"Tuesday\",\r\n      \"Wednesday\",\r\n      \"Thursday\",\r\n      \"Friday\",\r\n      \"Saturday\",\r\n      \"Sunday\",\r\n    ];\r\n\r\n    let day = days[d.getDay()];\r\n    let date = d.getDate();\r\n    let month = months[d.getMonth()];\r\n    let year = d.getFullYear();\r\n\r\n    return `${day} ${date} ${month} ${year}`;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <main>\r\n        <div className=\"App\">\r\n          <div className=\"divSep\" style={{ backgroundImage: `url(${photo})` }}>\r\n            <p>W3THR</p>\r\n          </div>\r\n          <form onSubmit={(e) => search(e)}>\r\n            <h1 className=\"searchbox\">\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"...CITY, STATE?\"\r\n                // the event 'e'\r\n                onChange={(e) => setQuery(e.target.value)}\r\n                value={query}\r\n                onClick={search}\r\n              />\r\n            </h1>\r\n            {/* when we only have one condition && to show just one thing  */}\r\n            {typeof weather.main != \"undefined\" ? (\r\n              <ul className=\"locationbox\">\r\n                <li>LOCATION:{weather.name}</li>\r\n                <li>DATE:{dateBuild(new Date())}</li>\r\n                <li>TEMP:{Math.round(weather.main.temp / 10)}*c</li>\r\n                {/* <li>Humidity:</li> */}\r\n                <li>SKY:{weather.weather[0].main}</li>\r\n              </ul>\r\n            ) : (\r\n              <ul className=\"initPage\">\r\n                <li>Enter (City, state) to view current weather!</li>\r\n                <li>Make sure to seperate with comma!</li>\r\n                <li>This app was created using openweather.api</li>\r\n                </ul>\r\n            )}\r\n          </form>\r\n        </div>\r\n      </main>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n// const response = await fetch(url, {\r\n//   method: 'GET', // *GET, POST, PUT, DELETE, etc.\r\n//   // mode: 'cors', // no-cors, *cors, same-origin\r\n//   // cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n//   // credentials: 'same-origin', // include, *same-origin, omit\r\n//   headers: {\r\n//     'Authorization': 'Client-ID uRJ60j0mPdYWVHTlh8i5Q9sTUMzRKaU5FAz1b-7rDlY',\r\n//     'Content-Type': 'application/json'\r\n//   },\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}